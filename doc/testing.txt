RSpec Testing Guidelines
========================

1. Use RSpec hooks for setup and teardown

	Use RSpec's before/after hooks for test setup instead of setup/teardown methods.
	The test configuration is handled in spec/rails_helper.rb which includes
	database transactions and other necessary setup.

	RSpec.describe "Your feature" do
	  before do
	    # ... your setup
	  end

	  after do
	    # ... your cleanup (usually not needed due to transactions)
	  end
	end

2. Use descriptive describe/context blocks

	Structure your tests with clear descriptions that explain what is being tested:

	RSpec.describe Admin::UsersController do
	  describe "POST #create" do
	    context "with valid parameters" do
	      it "creates a new user" do
	        # ... test code
	      end
	    end

	    context "with invalid parameters" do
	      it "renders the new template" do
	        # ... test code
	      end
	    end
	  end
	end

3. Database fixtures and test data

	The test database is set up once using spec/internal/db/seed_for_tests.rb.
	Each test runs in a transaction that is rolled back after completion,
	ensuring a clean state for each test.

	You can reference the seeded data in your tests:
	- Site: 'site-with-pages.com'
	- User: 'a-user@example.com'
	- Page: 'a-page'
	- Article: 'a page article'

	For additional test data, use let blocks or create objects inline:

	let(:user) { User.create!(first_name: 'Test', email: 'test@example.com', password: 'Password123!') }

4. Running Tests

	- Run all tests: `bundle exec rspec`
	- Run specific file: `bundle exec rspec spec/requests/admin_users_crud_spec.rb`
	- Run specific test: `bundle exec rspec spec/requests/admin_users_crud_spec.rb:11`
	- Run tests matching pattern: `bundle exec rspec spec/requests/`

5. Test Types

	- Model specs: spec/models/ - Unit tests for models
	- Request specs: spec/requests/ - Integration tests for controllers
	- Helper specs: spec/helpers/ - Tests for view helpers
	- Other specs: Add as needed following RSpec conventions